#!/bin/bash

# https://shane.io/2013/01/28/rebase-based-workflow.html

git-recursive-rebase () {
  if ! git diff-index --quiet HEAD; then
    echo "You have local changes; either stash them or get rid of them"
    exit
  fi

  local old_head=`git rev-parse HEAD`
  local local_branch=`git symbolic-ref -q HEAD | sed 's/^refs\/heads\///'`

  if [ -z "${local_branch}" ]; then
    echo "HEAD is currently detached--aborting."
    return 1
  fi

  # TODO infinite recursion, error checking
  local remote_branch=`git config branch.${local_branch}.merge | sed 's/^refs\/heads\///'`
  local remote=`git config branch.${local_branch}.remote`

  # If remote is local repository, then we're tracking a local branch
  # We want to fetch that branch's remote branch, so change to it and recurse
  if [ "$remote" == "." ]; then
    # Switch to tracking branch, refresh it, and switch back to our branch
    echo "$local_branch"
    echo -n ""
    git checkout -q "${remote_branch}"
    git-recursive-rebase 2>&1 | sed '1 s/^/├─ /; 2~1 s/^/│ /; $ s/[│├]/└/g'
    git checkout -q "${local_branch}"
  fi

  if [ "${remote}" == "." ]; then
    local rebase_ref="${remote_branch}"
  else
    git fetch ${remote}
    local rebase_ref="${remote}/${remote_branch}"
  fi

  if [ -n "`git rev-list ${local_branch}..${rebase_ref}`" ]; then
    echo "Rebasing ${local_branch} with changes from ${rebase_ref}"
    if ! git rebase ${rebase_ref}; then
      echo "##################################################################"
      echo "UNABLE TO REBASE"
      echo "Run 'git rebase ${rebase_ref}' to deal with this conflict manually"
      git rebase --abort
    fi
  fi
}

git-recursive-rebase
